{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","usersFromServer","map","TodoList","todos","App","useState","setTitle","todosFromServer","setTodos","titleError","setTitleError","userError","setUserError","select","setSelect","sort","post1","post2","postId","setPostId","action","method","onSubmit","event","preventDefault","prevState","htmlFor","type","placeholder","value","onChange","target","handleTitle","defaultValue","required","handleSelect","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4d40443.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './UserInfo.scss';\n\nimport { User } from '../Types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import './TodoInfo.scss';\n\nimport cn from 'classnames';\nimport usersFromServer from '../../api/users';\nimport { UserInfo } from '../UserInfo';\nimport { Post } from '../Types/Post';\nimport { User } from '../Types/User';\n\ntype Props = {\n  todo: Post,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    key={todo.id}\n    data-id={todo.id}\n    className={cn('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {usersFromServer.map((user: User) => user.id === todo.userId && (\n      <UserInfo\n        user={user}\n        key={user.id}\n      />\n    ))}\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { Post } from '../Types/Post';\n\ntype Props = {\n  todos: Post[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo: Post) => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\ntype Post = {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n};\n\nconst getPostId = (posts: Post[]) => {\n  const maxIdPost = posts.sort((post1, post2) => post2.id - post1.id);\n\n  return maxIdPost[0].id + 1;\n};\n\nexport const App = () => {\n  const [title, setTitle] = useState<string>('');\n  const [todos, setTodos] = useState<Post[]>([...todosFromServer]);\n  const [titleError, setTitleError] = useState<boolean>(false);\n  const [userError, setUserError] = useState<boolean>(false);\n  const [select, setSelect] = useState<number>(0);\n  const [postId, setPostId] = useState<number>(getPostId(todosFromServer));\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleError(false);\n    setTitle(event.target.value);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserError(false);\n    setSelect(+event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title || select === 0) {\n      setTitleError(!title);\n      setUserError(select === 0);\n\n      return;\n    }\n\n    setPostId(postId + 1);\n\n    setTodos(prevState => [\n      ...prevState, {\n        id: postId,\n        title,\n        completed: false,\n        userId: select,\n      }]);\n\n    setTitle('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        key={postId}\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={event => handleTitle(event)}\n          />\n\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            defaultValue={0}\n            required\n            onChange={event => handleSelect(event)}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList\n        todos={todos}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}